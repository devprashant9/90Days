public int circularSubarraySum(int arr[]) {

        int totalSum = 0;
        boolean allNegative = true;
        
        for(int val : arr) {
            totalSum += val;
            if(val > 0) {
                allNegative = false;
            }
        }
        
        int maxKadane = kadanes(arr);
        
        if(allNegative) {
            return maxKadane;
        }
        
       
        
        for(int i = 0; i < arr.length; i++) {
            arr[i] = -arr[i];
        }
        
         int maxInvertKadanes = kadanes(arr);
         
         for(int i = 0; i < arr.length; i++) {
            arr[i] = -arr[i];
        }
        
        
        int circularMax = totalSum + maxInvertKadanes;
        
        return Math.max(circularMax, maxKadane);
    }
    
    public static int kadanes(int[] arr) {
        int maxSoFar = arr[0], currMax = arr[0];
        
        for(int i = 1; i < arr.length; i++) {
            currMax = Math.max(arr[i], currMax + arr[i]);
            maxSoFar = Math.max(maxSoFar, currMax);
        }
        return maxSoFar;
    }